import asyncio
import aiohttp
from aiohttp import ClientSession
import time

yay = []

# Informasi awal
print("\n\033[32;1m[+] Exploit KCFinder Path Finder\033[0m")
print("\033[32;1m[+] Author  : pencuric0de (Meow404)\033[0m")
print("\033[32;1m[+] Tested  : Windows, Terminal & Linux\033[0m\n")

# Mulai timer
start = time.time()

# Baca daftar target dari file
with open("contoh.txt", "r") as f:
    targets = [line.strip() for line in f if line.strip()]

# Fungsi async untuk melakukan request
async def fetch(url, session):
    try:
        async with session.get(url, timeout=10) as response:
            status = response.status
            content_type = response.headers.get('Content-Type', '')
            text = await response.text()
            
            # Filter hasil hanya yang valid dan bukan kosong
            if status == 200 and ('text' in content_type or 'html' in content_type) and len(text) > 200:
                print(f"\033[92;1m[FOUND]\033[0m {url} \033[90m(len: {len(text)})\033[0m")
                yay.append(url)
                with open('shell.txt', 'a') as output_file:
                    output_file.write(url + '\n')
            elif status == 403:
                print(f"\033[91;1m[FORBIDDEN]\033[0m {url}")
            elif status == 404:
                print(f"\033[90m[NOT FOUND]\033[0m {url}")
            else:
                print(f"\033[95;1m[OTHER] {url} - Status {status}\033[0m")

    except Exception as e:
        print(f"\033[91;1m[ERROR] {url} - {e}\033[0m")

# Fungsi utama scan
async def run():
    tasks = []

    # Baca path dari wordlist
    with open('wordlist.txt', 'r') as admin_list:
        paths = [path.strip() for path in admin_list if path.strip()]

    async with ClientSession() as session:
        for target in targets:
            target = target.replace('https://', '').replace('http://', '').strip('/')
            for scheme in ['http', 'https']:
                base_url = f'{scheme}://{target}'

                for path in paths:
                    full_url = f"{base_url}/{path}"
                    task = asyncio.ensure_future(fetch(full_url, session))
                    tasks.append(task)

        await asyncio.gather(*tasks)

# Jalankan event loop
asyncio.run(run())

# Selesai, tampilkan ringkasan
end = time.time()
script_time = end - start

print("\n\033[92;1mScan selesai dalam {:.2f} detik\033[0m".format(script_time))
print("\n\033[93;1m### \033[92;1mHasil yang ditemukan \033[93;1m###\033[0m")

if len(yay) == 0:
    print("\033[91;1m!!! Tidak ada hasil ditemukan !!!\033[0m")
else:
    for url in yay:
        print(url)
    print("\n\033[92;1mDisimpan ke shell.txt\033[0m")
